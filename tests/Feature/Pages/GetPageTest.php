<?php

namespace Anacreation\Cms\Tests\Feature\Pages;

use Anacreation\Cms\Exceptions\AuthenticationException;
use Anacreation\Cms\Exceptions\PageNotFoundHttpException;
use Anacreation\Cms\Exceptions\UnAuthorizedException;
use Anacreation\Cms\Models\Language;
use Anacreation\Cms\Models\Page;
use Anacreation\Cms\Models\Permission;
use Anacreation\Cms\Tests\TestCase;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;

class GetPageTest extends TestCase
{
    use RefreshDatabase;

    public function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub

        factory(Language::class)->create([
                                             'is_default' => true,
                                         ]);
    }

    /**
     * @test
     */
    public function get_active_pages_successfully() {

        $this->withoutExceptionHandling();

        $urls = [
            'url_1',
            'url_2',
            'url_3',
            'url_4',
        ];

        $target = array_random($urls);

        foreach($urls as $url) {
            factory(Page::class)->create([
                                             'uri'      => $url,
                                             'template' => 'home',
                                         ]);
        }

        $response = $this->get($target);

        $response->assertSuccessful();
    }

    /**
     * @test
     */
    public function get_not_exists_page() {

        $this->withoutExceptionHandling();

        $urls = [
            'url_1',
            'url_2',
            'url_3',
            'url_4',
        ];

        $target = "somewhere";

        foreach($urls as $url) {
            factory(Page::class)->create([
                                             'uri'      => $url,
                                             'template' => 'test',
                                         ]);
        }

        $this->expectException(PageNotFoundHttpException::class);

        $this->get($target);

    }

    /**
     * @test
     */
    public function get_non_active_page() {

        $this->withoutExceptionHandling();

        $urls = [
            'url_1',
            'url_2',
            'url_3',
            'url_4',
        ];

        $target = "somewhere";

        foreach($urls as $url) {
            factory(Page::class)->create([
                                             'uri'      => $url,
                                             'template' => 'test',
                                         ]);
        }

        factory(Page::class)->create([
                                         'uri'       => $target,
                                         'template'  => 'test',
                                         'is_active' => false,
                                     ]);

        $this->expectException(PageNotFoundHttpException::class);

        $this->get($target);

    }

    /**
     * @test
     */
    public function get_restricted_page_without_login() {

        $this->withoutExceptionHandling();

        $target = "somewhere";

        factory(Page::class)->create([
                                         'uri'           => $target,
                                         'template'      => 'test',
                                         'is_restricted' => true,
                                     ]);

        $this->expectException(AuthenticationException::class);

        $this->get($target);
    }


    /**
     * @test
     */
    public function get_restricted_page_without_login_and_nonactive() {

        $this->withoutExceptionHandling();

        $target = "somewhere";

        factory(Page::class)->create([
                                         'uri'           => $target,
                                         'template'      => 'test',
                                         'is_active'     => false,
                                         'is_restricted' => true,
                                     ]);

        $this->expectException(PageNotFoundHttpException::class);

        $this->get($target);
    }

    /**
     * @test
     */
    public function get_restricted_page_with_login_and_nonactive() {

        $this->withoutExceptionHandling();

        $user = factory(User::class)->create();
        $this->actingAs($user);;

        $target = "somewhere";

        factory(Page::class)->create([
                                         'uri'           => $target,
                                         'template'      => 'test',
                                         'is_active'     => false,
                                         'is_restricted' => true,
                                     ]);

        $this->expectException(PageNotFoundHttpException::class);

        $this->get($target);
    }

    /**
     * @test
     */
    public function get_restricted_page_with_login() {

        $this->withoutExceptionHandling();

        $user = factory(User::class)->create();
        $this->actingAs($user);

        $target = "somewhere";

        factory(Page::class)->create([
                                         'uri'           => $target,
                                         'template'      => 'home',
                                         'is_restricted' => true,
                                     ]);

        $this->get($target)->assertSuccessful();
    }

    /**
     * @test
     */
    public function get_restricted_page_without_permission() {

        $this->withoutExceptionHandling();

        $permission = factory(Permission::class)->create();

        $user = factory(User::class)->create();
        $this->actingAs($user);

        $target = "somewhere";

        factory(Page::class)->create([
                                         'uri'           => $target,
                                         'template'      => 'test',
                                         'is_restricted' => true,
                                         'permission_id' => $permission->id,
                                     ]);

        $this->expectException(UnAuthorizedException::class);

        $this->get($target);
    }

    /**
     * @test
     */
    public function get_page_with_definition_file() {
        $target = "somewhere";

        factory(Page::class)->create([
                                         'uri'      => $target,
                                         'template' => 'home',
                                     ]);

        $this->get($target)
             ->assertSuccessful();
    }

}
