<?php

namespace Anacreation\Cms\Tests;

use Anacreation\Cms\Models\CommonContent;
use Anacreation\Cms\Models\Language;
use Anacreation\Cms\Services\CommonContentService;
use Illuminate\Foundation\Testing\DatabaseMigrations;

class CommonContentServiceTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * @var Language
     */
    private $language;

    protected function setUp():void {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->common = new CommonContentService;
        $this->language = factory(Language::class)->create([
                                                               'code'       => 'en',
                                                               'is_default' => true,
                                                           ]);
        $this->language2 = factory(Language::class)->create([
                                                                'is_default' => false,
                                                            ]);
    }

    /**
     * @test
     */
    public function get_common_content_by_key() {
        $getKey = $key = 'test_content';
        $content = 'this is testing content';

        $contents = [
            [
                'lang_id' => $this->language->id,
                'content' => $content,
            ],
        ];

        $commonContent = factory(CommonContent::class)->create(['key' => $key]);

        $this->saveContent($commonContent,
                           $contents,
                           CommonContent::Identifier);
        $result = (new CommonContentService)->getContent($getKey);

        $this->assertEquals($content,
                            $result);
    }

    /**
     * @test
     */
    public function get_common_content_by_key_with_defalut() {
        $key = 'test_content';
        $getKey = 'test_content_more';
        $content = 'this is testing content';
        $default = 'this is default content';

        $contents = [
            [
                'lang_id' => $this->language->id,
                'content' => $content,
            ],
        ];

        $commonContent = factory(CommonContent::class)->create(['key' => $key]);

        $this->saveContent($commonContent,
                           $contents,
                           CommonContent::Identifier);
        $result = (new CommonContentService)->getContent($getKey,
                                                         $default);

        $this->assertEquals($default,
                            $result);

    }

    /**
     * @test
     */
    public function get_common_content_by_key_with_langauge_code() {
        $getKey = $key = 'test_content';
        $content = 'this is testing content';
        $content2 = 'this is testing content for language 2';
        $default = 'this is default content';

        $contents = [
            [
                'lang_id' => $this->language->id,
                'content' => $content,
            ],
            [
                'lang_id' => $this->language2->id,
                'content' => $content2,
            ],
        ];

        $commonContent = factory(CommonContent::class)->create(['key' => $key]);

        $this->saveContent($commonContent,
                           $contents,
                           CommonContent::Identifier);
        $result = (new CommonContentService)->getContent($getKey,
                                                         $default,
                                                         $this->language2->code);

        $this->assertEquals($content2,
                            $result);

    }

    /**
     * @test
     */
    public function get_content_with_fall_back() {
        $key = 'test_content';
        $content = 'this is testing content';

        $contents = [
            [
                'lang_id' => $this->language->id,
                'content' => $content,
            ],
        ];

        $commonContent = factory(CommonContent::class)->create(['key' => $key]);

        $commonContent = $this->saveContent($commonContent,
                                            $contents,
                                            CommonContent::Identifier);
        $result = (new CommonContentService)->getContent($key,
                                                         null,
                                                         $this->language2->code);

        $this->assertEquals($content,
                            $result);

    }
}
