<?php

namespace Anacreation\Cms\Tests;

use Anacreation\Cms\ContentModels\BooleanContent;
use Anacreation\Cms\ContentModels\DatetimeContent;
use Anacreation\Cms\ContentModels\FileContent;
use Anacreation\Cms\ContentModels\NumberContent;
use Anacreation\Cms\ContentModels\StringContent;
use Anacreation\Cms\ContentModels\TextContent;
use Anacreation\Cms\Entities\ContentObject;
use Anacreation\Cms\Models\Language;
use Anacreation\Cms\Models\Page;
use Anacreation\Cms\Services\ContentService;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Http\UploadedFile;

class CreateContentTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * @var \Anacreation\Cms\Services\ContentService
     */
    private $service;

    /**
     * @var \Anacreation\Cms\Models\Page
     */
    private $page;

    protected function setUp():void {
        parent::setUp(); // TODO: Change the autogenerated stub


        $this->service = new ContentService();
        $this->page = factory(Page::class)->create();
        $this->language = factory(Language::class)->create([
            'is_default' => true
        ]);
    }

    /**
     * @test
     */
    public function create_string_content() {
        $string_content = "content";
        $identifier = "identifier";

        $contentObject = new ContentObject($identifier, 1, $string_content,
            'string');

        $this->service->updateOrCreateContentIndexWithContentObject($this->page,
            $contentObject);

        $this->assertDatabaseHas('content_indices', [
            'identifier'   => $identifier,
            'group_id'     => $this->page->id,
            'group_type'   => get_class($this->page),
            'content_type' => StringContent::class,
        ]);

        $this->assertDatabaseHas('text_contents', [
            'content' => $string_content,
        ]);

    }

    /**
     * @test
     */
    public function create_text_content() {

        $text_content = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusantium autem consequuntur deserunt dignissimos eligendi, eos eum explicabo, harum maxime minima obcaecati officiis perspiciatis praesentium quisquam soluta temporibus tenetur totam velit!";
        $identifier = "identifier";

        $contentObject = new ContentObject($identifier, 1, $text_content,
            'text');

        $this->service->updateOrCreateContentIndexWithContentObject($this->page,
            $contentObject);

        $this->assertDatabaseHas('content_indices', [
            'identifier'   => $identifier,
            'group_id'     => $this->page->id,
            'group_type'   => get_class($this->page),
            'content_type' => TextContent::class,
        ]);

        $this->assertDatabaseHas('text_contents', [
            'content' => $text_content,
        ]);

    }

    /**
     * @test
     */
    public function create_number_content() {

        $number = 123456;
        $identifier = "identifier";

        $contentObject = new ContentObject($identifier, 1, $number,
            'number');

        $this->service->updateOrCreateContentIndexWithContentObject($this->page,
            $contentObject);

        $this->assertDatabaseHas('content_indices', [
            'identifier'   => $identifier,
            'group_id'     => $this->page->id,
            'group_type'   => get_class($this->page),
            'content_type' => NumberContent::class,
        ]);

        $this->assertDatabaseHas('number_contents', [
            'content' => $number,
        ]);

    }

    /**
     * @test
     */
    public function create_date_content() {

        $date = "2 January, 2018";
        $identifier = "identifier";

        $contentObject = new ContentObject($identifier, 1, $date,
            'datetime');

        $this->service->updateOrCreateContentIndexWithContentObject($this->page,
            $contentObject);

        $this->assertDatabaseHas('content_indices', [
            'identifier'   => $identifier,
            'group_id'     => $this->page->id,
            'group_type'   => get_class($this->page),
            'content_type' => DatetimeContent::class,
        ]);

        $this->assertDatabaseHas('datetime_contents', [
            'content' => new \Carbon\Carbon($date),
        ]);

    }

    /**
     * @test
     */
    public function create_boolean_content() {

        $data = "1";
        $identifier = "identifier";

        $contentObject = new ContentObject($identifier, 1, $data,
            'boolean');

        $this->service->updateOrCreateContentIndexWithContentObject($this->page,
            $contentObject);

        $this->assertDatabaseHas('content_indices', [
            'identifier'   => $identifier,
            'group_id'     => $this->page->id,
            'group_type'   => get_class($this->page),
            'content_type' => BooleanContent::class,
        ]);

        $this->assertDatabaseHas('boolean_contents', [
            'content' => 1,
        ]);

    }

    /**
     * @test
     */
    public function create_file_content() {

        $file = UploadedFile::fake()->image('avatar.jpg')->size(100);

        $identifier = "identifier";

        $contentObject = new ContentObject($identifier, 1, "",
            'file', $file);

        $this->service->updateOrCreateContentIndexWithContentObject($this->page,
            $contentObject);

        $this->assertDatabaseHas('content_indices', [
            'identifier'   => $identifier,
            'group_id'     => $this->page->id,
            'group_type'   => get_class($this->page),
            'content_type' => FileContent::class,
        ]);

        $this->assertDatabaseHas('file_contents', [
            'link' => "files/avatar.jpg",
        ]);

        $path = public_path("files/avatar.jpg");

        $this->assertFileExists($path);

        unlink($path);

    }
}
